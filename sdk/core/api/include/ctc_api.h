/**********************************************************
 * ctc_api.h
 * Date:
 * Author: auto generate from include file
 **********************************************************/
#ifndef _CTC_API_H
#define _CTC_API_H
#ifdef __cplusplus
extern "C" {
#endif
/**********************************************************
 * 
 * Header file
 * 
 **********************************************************/
#include "kal.h"
#include "ctc_error.h"
#include "ctc_const.h"
#include "ctc_linklist.h"
#include "ctc_aclqos.h"
#include "ctc_chip.h"
#include "ctc_cpu_traffic.h"
#include "ctc_ftm.h"
#include "ctc_internal_port.h"
#include "ctc_interrupt.h"
#include "ctc_ipuc.h"
#include "ctc_l2.h"
#include "ctc_l3if.h"
#include "ctc_learning_aging.h"
#include "ctc_linkagg.h"
#include "ctc_mirror.h"
#include "ctc_mpls.h"
#include "ctc_nexthop.h"
#include "ctc_parser.h"
#include "ctc_pdu.h"
#include "ctc_port.h"
#include "ctc_queue.h"
#include "ctc_register.h"
#include "ctc_stats.h"
#include "ctc_vlan.h"
/**********************************************************
 * 
 * Defines and macros
 * 
 **********************************************************/
struct ctc_api_s
{
    char *chip_name;
    /*##aclqos##*/
    int32(*ctc_acl_entry_add)(uint32, uint32, ctc_aclqos_entry_t*);
    int32(*ctc_acl_entry_invalid)(uint32, ctc_aclqos_key_type_t, uint32, bool);
    int32(*ctc_acl_entry_remove_all)(uint32, ctc_aclqos_key_type_t);
    int32(*ctc_acl_entry_remove)(uint32, ctc_aclqos_key_type_t, uint32);
    int32(*ctc_acl_entry_set_action)(uint32, ctc_aclqos_key_type_t, uint32, ctc_aclqos_action_t*);
    int32(*ctc_acl_entry_stats_get)(uint32, ctc_aclqos_key_type_t, uint32, ctc_stats_basic_t*);
    int32(*ctc_acl_entry_stats_reset)(uint32, ctc_aclqos_key_type_t, uint32);
    int32(*ctc_acl_entry_unset_action)(uint32, ctc_aclqos_key_type_t, uint32, ctc_aclqos_action_t*);
    int32(*ctc_acl_get_permit_entry_stats_all)(uint32, ctc_stats_basic_t*);
    int32(*ctc_acl_pbr_enable)(uint16, bool);
    int32(*ctc_acl_pbr_label_create)(uint32);
    int32(*ctc_acl_pbr_label_remove)(uint32);
    int32(*ctc_acl_pbr_label_set)(uint16, uint32);
    int32(*ctc_acl_pbr_label_unset)(uint16);
    int32(*ctc_acl_port_enable)(uint16, ctc_direction_t, bool);
    int32(*ctc_acl_port_label_create)(uint32);
    int32(*ctc_acl_port_label_remove)(uint32);
    int32(*ctc_acl_port_label_set)(uint16, ctc_direction_t, uint32);
    int32(*ctc_acl_port_label_unset)(uint16, ctc_direction_t);
    int32(*ctc_aclqos_init)(ctc_aclqos_global_cfg_t*);
    int32(*ctc_acl_set_l2_high_priority)(uint16, ctc_direction_t, bool);
    int32(*ctc_acl_tiny_fragment_default_entry_add)(bool);
    int32(*ctc_acl_vlan_enable)(uint16, ctc_direction_t, bool);
    int32(*ctc_acl_vlan_label_create)(uint32);
    int32(*ctc_acl_vlan_label_remove)(uint32);
    int32(*ctc_acl_vlan_label_set)(uint16, ctc_direction_t, uint32);
    int32(*ctc_acl_vlan_label_unset)(uint16, ctc_direction_t);
    int32(*ctc_qos_entry_add)(uint32, uint32, ctc_aclqos_entry_t*);
    int32(*ctc_qos_entry_invalid)(uint32, ctc_aclqos_key_type_t, uint32, bool);
    int32(*ctc_qos_entry_remove_all)(uint32, ctc_aclqos_key_type_t);
    int32(*ctc_qos_entry_remove)(uint32, ctc_aclqos_key_type_t, uint32);
    int32(*ctc_qos_entry_set_action)(uint32, ctc_aclqos_key_type_t, uint32, ctc_aclqos_action_t*);
    int32(*ctc_qos_entry_stats_get)(uint32, ctc_aclqos_label_type_t, ctc_aclqos_key_type_t, uint32, ctc_stats_basic_t*);
    int32(*ctc_qos_entry_stats_reset)(uint32, ctc_aclqos_key_type_t, uint32);
    int32(*ctc_qos_entry_unset_action)(uint32, ctc_aclqos_key_type_t, uint32, ctc_aclqos_action_t*);
    int32(*ctc_qos_flow_policer_create)(ctc_qos_policer_t*, uint32);
    int32(*ctc_qos_flow_policer_remove)(uint32);
    int32(*ctc_qos_flow_policer_update)(uint32, ctc_qos_policer_t*);
    int32(*ctc_qos_get_flow_policer_stats)(uint32, ctc_qos_policer_stats_t*);
    int32(*ctc_qos_get_flow_policer)(uint32, ctc_qos_policer_t*);
    int32(*ctc_qos_get_policer_global_enable)(bool*);
    int32(*ctc_qos_get_policer_stats_global_enable)(bool*);
    int32(*ctc_qos_get_port_cfi)(uint16, uint8*);
    int32(*ctc_qos_get_port_cos)(uint16, uint8*);
    int32(*ctc_qos_get_port_domain)(uint16, ctc_direction_t, uint8*);
    int32(*ctc_qos_get_port_policer_stats)(uint16, ctc_direction_t, uint8, ctc_qos_policer_stats_t*);
    int32(*ctc_qos_get_port_policer)(uint32, ctc_direction_t, uint8, ctc_qos_policer_t*);
    int32(*ctc_qos_get_port_replace_enable)(uint16, ctc_qos_replace_t, bool*);
    int32(*ctc_qos_get_port_trust)(uint16, ctc_qos_trust_t*);
    int32(*ctc_qos_policer_global_enable)(bool);
    int32(*ctc_qos_policer_stats_global_enable)(bool);
    int32(*ctc_qos_port_enable)(uint16, ctc_direction_t, bool);
    int32(*ctc_qos_port_label_create)(uint32);
    int32(*ctc_qos_port_label_remove)(uint32);
    int32(*ctc_qos_port_label_set)(uint16, ctc_direction_t, uint32);
    int32(*ctc_qos_port_label_unset)(uint16, ctc_direction_t);
    int32(*ctc_qos_reset_flow_policer_stats)(uint32);
    int32(*ctc_qos_reset_port_policer_stats)(uint16, ctc_direction_t, uint8);
    int32(*ctc_qos_set_cos_priority_color_map)(uint8, uint8, uint8, uint8, ctc_qos_color_t);
    int32(*ctc_qos_set_default_domain)(void);
    int32(*ctc_qos_set_dscp_priority_color_map)(uint8, uint8, uint8, ctc_qos_color_t);
    int32(*ctc_qos_set_exp_priority_color_map)(uint8, uint8, uint8, ctc_qos_color_t);
    int32(*ctc_qos_set_flow_policer_first_en)(ctc_direction_t, bool);
    int32(*ctc_qos_set_ip_prec_priority_color_map)(uint8, uint8, uint8, ctc_qos_color_t);
    int32(*ctc_qos_set_l2_high_priority)(uint16, ctc_direction_t, bool);
    int32(*ctc_qos_set_policer_ipg_global_enable)(bool);
    int32(*ctc_qos_set_port_cfi)(uint16, uint8);
    int32(*ctc_qos_set_port_cos)(uint16, uint8);
    int32(*ctc_qos_set_port_domain)(uint16, ctc_direction_t, uint8);
    int32(*ctc_qos_set_port_policer)(uint16, ctc_direction_t, uint8, ctc_qos_policer_t*);
    int32(*ctc_qos_set_port_replace_enable)(uint16, ctc_qos_replace_t, bool);
    int32(*ctc_qos_set_port_trust)(uint16, ctc_qos_trust_t);
    int32(*ctc_qos_set_priority_color_cos_map)(uint8, uint8, ctc_qos_color_t, uint8, uint8);
    int32(*ctc_qos_set_priority_color_dscp_map)(uint8, uint8, ctc_qos_color_t, uint8);
    int32(*ctc_qos_set_priority_color_exp_map)(uint8, uint8, ctc_qos_color_t, uint8);
    int32(*ctc_qos_set_sequential_policer)(bool);
    int32(*ctc_qos_set_service_policer)(uint16, ctc_qos_policer_t*);
    int32(*ctc_qos_tiny_fragment_default_entry_add)(bool);
    int32(*ctc_qos_unset_port_policer)(uint16, ctc_direction_t, uint8);
    int32(*ctc_qos_unset_service_policer)(uint16);
    int32(*ctc_qos_vlan_enable)(uint16, ctc_direction_t, bool);
    int32(*ctc_qos_vlan_label_create)(uint32);
    int32(*ctc_qos_vlan_label_remove)(uint32);
    int32(*ctc_qos_vlan_label_set)(uint16, ctc_direction_t, uint32);
    int32(*ctc_qos_vlan_label_unset)(uint16, ctc_direction_t);
    int32(*ctc_service_entry_add)(ctc_aclqos_entry_oper_t*);
    int32(*ctc_service_entry_remove_all)(uint16, ctc_aclqos_key_type_t);
    int32(*ctc_service_entry_remove)(ctc_aclqos_entry_oper_t*);
    int32(*ctc_service_entry_set_action)(uint32, ctc_aclqos_key_type_t, uint32, ctc_aclqos_action_t*);
    int32(*ctc_service_label_create)(uint16);
    int32(*ctc_service_label_remove)(uint16);
    /*##aps##*/
    /*##chip##*/
    int32(*ctc_chip_init)(uint8);
    int32(*ctc_data_path_init)(ctc_chip_reset_cb, ctc_chip_datapath_t*, char*);
    int32(*ctc_get_chip_clock)(uint16*);
    int32(*ctc_get_gchip_id)(uint8, uint8*);
    int32(*ctc_get_local_chip_num)(uint8*);
    int32(*ctc_parity_error_init)(void);
    int32(*ctc_set_chip_global_cfg)(ctc_chip_global_cfg_t*);
    int32(*ctc_set_gchip_id)(uint8, uint8);
    /*##cpu_traffic##*/
    int32(*ctc_cpu_traffic_init)(void);
    int32(*ctc_cpu_traffic_set_exception)(uint8, uint16, ctc_excp_dest_type_t);
    int32(*ctc_cpu_traffic_set_fatal_exception)(uint8, uint16, ctc_excp_dest_type_t);
    int32(*ctc_cpu_traffic_set_fwd_queue_class)(uint8, uint8);
    int32(*ctc_cpu_traffic_set_fwd_queue_shape)(uint8, ctc_queue_shape_t*);
    int32(*ctc_cpu_traffic_unset_fwd_queue_shape)(uint8);
    int32(*ctc_packet_tocpu_limit_individual_rate)(ctc_packet_tocpu_reason_t, uint8, uint32);
    int32(*ctc_packet_tocpu_limit_total_rate)(uint32);
    int32(*ctc_packet_tocpu_set_reason_class)(ctc_packet_tocpu_reason_t, uint8, uint8);
    /*##ftm##*/
    int32(*ctc_ftm_mem_alloc)(ctc_ftm_profile_info_t*);
    int32(*ctc_ftm_set_default_profile)(ctc_ftm_profile_info_t*);
    int32(*ctc_ftm_show_alloc_info)(void);
    /*##internal_port##*/
    int32(*ctc_internal_port_allocate)(ctc_internal_port_assign_para_t*);
    int32(*ctc_internal_port_init)(void);
    int32(*ctc_internal_port_release)(ctc_internal_port_assign_para_t*);
    int32(*ctc_internal_port_set)(ctc_internal_port_assign_para_t*);
    /*##interrupt##*/
    int32(*ctc_interrupt_clear_fatal_intr)(uint8, uint8);
    int32(*ctc_interrupt_clear_normal_intr)(uint8, uint8);
    int32(*ctc_interrupt_clear_sub_normal_intr)(uint8, ctc_interrupt_normal_intr_type_t, uint8);
    int32(*ctc_interrupt_disable_fatal_intr)(uint8, uint8);
    int32(*ctc_interrupt_disable_normal_intr)(uint8, uint8);
    int32(*ctc_interrupt_disable_sub_normal_intr)(uint8, ctc_interrupt_normal_intr_type_t, uint8);
    int32(*ctc_interrupt_enable_fatal_intr)(uint8, uint8);
    int32(*ctc_interrupt_enable_normal_intr)(uint8, uint8);
    int32(*ctc_interrupt_enable_sub_normal_intr)(uint8, ctc_interrupt_normal_intr_type_t, uint8);
    int32(*ctc_interrupt_get_fatal_intr_status)(uint8, uint8, ctc_interrupt_fatal_intr_status_t*);
    int32(*ctc_interrupt_get_normal_all_intr_status)(uint8, uint32*);
    int32(*ctc_interrupt_get_normal_intr_status)(uint8, uint8, bool*);
    int32(*ctc_interrupt_reg_init_end)(void);
    int32(*ctc_interrupt_reg_init_start)(void);
    /*##ipmc##*/
    /*##ipuc##*/
    int32(*ctc_ipuc_add)(ctc_ipuc_param_t*);
    int32(*ctc_ipuc_add_default_entry)(ctc_ipuc_param_t*);
    int32(*ctc_ipuc_cpu_rpf_check)(bool);
    int32(*ctc_ipuc_init)(void*);
    int32(*ctc_ipuc_ipv6_enable)(bool);
    int32(*ctc_ipuc_remove)(ctc_ipuc_param_t*);
    int32(*ctc_ipuc_set_lookup_ctl)(ctc_ipuc_lookup_ctl_t*);
    int32(*ctc_ipuc_set_route_ctl)(ctc_ipuc_route_ctl_t*);
    /*##l2##*/
    int32(*ctc_l2_add_default_entry)(ctc_l2dflt_addr_t*);
    int32(*ctc_l2_add_fdb)(ctc_l2_addr_t*);
    int32(*ctc_l2_add_fdb_with_nexthop)(ctc_l2_addr_t*, uint32);
    int32(*ctc_l2_add_port_to_default_entry)(ctc_l2dflt_addr_t*);
    int32(*ctc_l2_fdb_flush)(ctc_l2_fdb_flush_t*);
    int32(*ctc_l2_fdb_init)(void*);
    int32(*ctc_l2_get_default_entry_features)(ctc_l2dflt_addr_t*);
    int32(*ctc_l2_get_fdb_by_index)(uint32, ctc_l2_addr_t*);
    int32(*ctc_l2_get_fdb_count)(ctc_l2_fdb_query_t*);
    int32(*ctc_l2_get_fdb_entry)(ctc_l2_fdb_query_t*, ctc_l2_fdb_query_rst_t*);
    int32(*ctc_l2mcast_add_addr)(ctc_l2_mcast_addr_t*);
    int32(*ctc_l2mcast_add_member)(ctc_l2_mcast_addr_t*);
    int32(*ctc_l2mcast_remove_addr)(ctc_l2_mcast_addr_t*);
    int32(*ctc_l2mcast_remove_member)(ctc_l2_mcast_addr_t*);
    int32(*ctc_l2_remove_default_entry)(ctc_l2dflt_addr_t*);
    int32(*ctc_l2_remove_fdb_by_index)(uint32);
    int32(*ctc_l2_remove_fdb)(ctc_l2_addr_t*);
    int32(*ctc_l2_remove_port_from_default_entry)(ctc_l2dflt_addr_t*);
    int32(*ctc_l2_set_default_entry_features)(ctc_l2dflt_addr_t*);
    /*##l3if##*/
    int32(*ctc_l3if_add_vmac_low_8bit)(uint16, ctc_l3if_vmac_t*);
    int32(*ctc_l3if_create)(uint16, ctc_l3if_t*);
    int32(*ctc_l3if_delete)(uint16, ctc_l3if_t*);
    int32(*ctc_l3if_get_property)(uint16, ctc_l3if_property_t, uint32*);
    int32(*ctc_l3if_get_router_mac)(mac_addr_t);
    int32(*ctc_l3if_get_vmac_low_8bit)(uint16, ctc_l3if_vmac_t*);
    int32(*ctc_l3if_get_vmac_prefix)(uint8, mac_addr_t);
    int32(*ctc_l3if_init)(void*);
    int32(*ctc_l3if_remove_vmac_low_8bit)(uint16, ctc_l3if_vmac_t*);
    int32(*ctc_l3if_set_property)(uint16, ctc_l3if_property_t, uint32);
    int32(*ctc_l3if_set_router_mac)(mac_addr_t);
    int32(*ctc_l3if_set_vmac_prefix)(uint8, mac_addr_t);
    /*##learning_aging##*/
    int32(*ctc_aging_get_aging_status)(uint8, uint32, ctc_aging_status_t*);
    int32(*ctc_aging_get_property)(ctc_aging_prop_t, uint32*);
    int32(*ctc_aging_read_aging_fifo)(uint8, ctc_aging_fifo_info_t*);
    int32(*ctc_aging_set_property)(ctc_aging_prop_t, uint32);
    int32(*ctc_get_learning_action)(ctc_learning_action_info_t*);
    int32(*ctc_learning_aging_init)(void*);
    int32(*ctc_learning_set_learning_en)(bool);
    int32(*ctc_learning_clear_learning_cache)(uint8, uint16);
    int32(*ctc_learning_get_cache_entry_valid_bitmap)(uint8, uint16*);
    int32(*ctc_learning_read_learning_cache)(uint8, uint16, ctc_learning_cache_t*);
    int32(*ctc_set_learning_action)(ctc_learning_action_info_t*);
    /*##linkagg##*/
    int32(*ctc_linkagg_add_port)(uint8, uint16);
    int32(*ctc_linkagg_create)(uint8);
    int32(*ctc_linkagg_get_1st_local_port)(uint8, uint16*, uint8*);
    int32(*ctc_linkagg_init)(void*);
    int32(*ctc_linkagg_remove_port)(uint8, uint16);
    int32(*ctc_linkagg_remove)(uint8);
    int32(*ctc_linkagg_show_ports)(uint8, uint16*, uint8*);
    /*##mirror##*/
    int32(*ctc_mirror_get_mirror_discard)(ctc_direction_t, ctc_mirror_discard_t, bool*);
    int32(*ctc_mirror_get_port_info)(uint16, ctc_direction_t, bool*, uint8*);
    int32(*ctc_mirror_get_vlan_info)(uint16, ctc_direction_t, bool*, uint8*);
    int32(*ctc_mirror_init)(void*);
    int32(*ctc_mirror_rspan_escape_en)(bool);
    int32(*ctc_mirror_rspan_escape_mac)(ctc_mirror_rspan_escape_t);
    int32(*ctc_mirror_rspan_set_dest)(ctc_mirror_dest_t*, uint32);
    int32(*ctc_mirror_set_dest)(ctc_mirror_dest_t*);
    int32(*ctc_mirror_set_mirror_discard)(ctc_direction_t, ctc_mirror_discard_t, bool);
    int32(*ctc_mirror_set_port_disable)(uint16, ctc_direction_t);
    int32(*ctc_mirror_set_port_enable)(uint16, ctc_direction_t, uint8);
    int32(*ctc_mirror_set_vlan_disable)(uint16, ctc_direction_t);
    int32(*ctc_mirror_set_vlan_enable)(uint16, ctc_direction_t, uint8);
    int32(*ctc_mirror_unset_dest)(ctc_mirror_dest_t*);
    /*##mpls##*/
    int32(*ctc_mpls_add_ilm)(ctc_mpls_ilm_t*);
    int32(*ctc_mpls_add_l2vpn_pw)(ctc_mpls_l2vpn_pw_t*);
    int32(*ctc_mpls_add_stats)(ctc_mpls_stats_index_t*);
    int32(*ctc_mpls_del_ilm)(ctc_mpls_ilm_t*);
    int32(*ctc_mpls_del_l2vpn_pw)(ctc_mpls_l2vpn_pw_t*);
    int32(*ctc_mpls_del_stats)(ctc_mpls_stats_index_t*);
    int32(*ctc_mpls_get_ilm)(uint32*, ctc_mpls_ilm_t*);
    int32(*ctc_mpls_get_stats)(ctc_mpls_stats_index_t*, ctc_stats_basic_t*);
    int32(*ctc_mpls_init)(ctc_mpls_init_t*);
    int32(*ctc_mpls_reset_in_sqn)(uint8);
    int32(*ctc_mpls_reset_out_sqn)(uint8);
    int32(*ctc_mpls_reset_stats)(ctc_mpls_stats_index_t*);
    int32(*ctc_mpls_update_ilm)(ctc_mpls_ilm_t*);
    int32(*ctc_mpls_check_label_used)(uint16 spaceid, uint32 label, bool *used);
    int32(*ctc_port_set_allow_mcast_mac_sa)(uint16 gport, bool enable);
    /*##nexthop##*/
    int32(*ctc_ecmp_nh_create)(ctc_nh_ecmp_creat_data_t*);
    int32(*ctc_ecmp_nh_delete)(uint32);
    int32(*ctc_ecmp_nh_update)(ctc_nh_ecmp_update_data_t*);
    int32(*ctc_egress_vlan_edit_create)(uint32, ctc_vlan_edit_nh_param_t*);
    int32(*ctc_egress_vlan_edit_remove)(uint32);
    int32(*ctc_flex_nh_create)(uint32, ctc_flex_nh_param_t*);
    int32(*ctc_flex_nh_remove)(uint32);
    int32(*ctc_iloop_nh_create)(uint32, ctc_loopback_nexthop_param_t*);
    int32(*ctc_iloop_nh_remove)(uint32);
    int32(*ctc_ipuc_nh_create)(uint32, ctc_ip_nh_param_t*);
    int32(*ctc_ipuc_nh_remove)(uint32);
    int32(*ctc_ipuc_nh_update)(uint32, ctc_ip_nh_param_t*);
    int32(*ctc_l2_create_ucast_nh)(uint16, ctc_nh_param_brguc_sub_type_t);
    int32(*ctc_l2_delete_ucast_nh)(uint16);
    int32(*ctc_l2_get_ucast_nh)(uint16, ctc_nh_param_brguc_sub_type_t, uint32*);
    int32(*ctc_mcast_nh_create)(uint32, ctc_mcast_nh_param_group_t*);
    int32(*ctc_mcast_nh_delete)(uint32);
    int32(*ctc_mcast_nh_update)(uint32, ctc_mcast_nh_param_group_t*);
    int32(*ctc_mpls_nh_create)(uint32, ctc_mpls_nexthop_param_t*);
    int32(*ctc_mpls_nh_remove)(uint32);
    int32(*ctc_mpls_nh_update)(uint32, ctc_mpls_nexthop_param_t*);
    int32(*ctc_nexthop_init)(ctc_nh_global_cfg_t*);
    int32(*ctc_nh_add_stats)(uint32);
    int32(*ctc_nh_del_stats)(uint32);
    int32(*ctc_nh_get_stats)(uint32, ctc_stats_basic_t*);
    int32(*ctc_nh_reset_stats)(uint32);
    int32(*ctc_rspan_nh_create)(uint32, uint32, ctc_rspan_nexthop_param_t*);
    int32(*ctc_rspan_nh_remove)(uint32);
    /*##oam##*/
    /*##parser##*/
    int32(*ctc_parser_add_l2_type)(uint8, ctc_parser_l2_ptl_entry_t*);
    int32(*ctc_parser_add_l3_type)(uint8, ctc_parser_l3_ptl_entry_t*);
    int32(*ctc_parser_get_ip_hash_ctl)(ctc_parser_ip_hash_ctl_t*);
    int32(*ctc_parser_get_ipv6_ctl)(uint8, ctc_parser_ipv6_ctl_t*);
    int32(*ctc_parser_get_l2flex_ctl)(uint8, ctc_parser_l2flex_ctl_t*);
    int32(*ctc_parser_get_l2_hash)(ctc_parser_l2_ctl_fld_t*);
    int32(*ctc_parser_get_l2_type)(ctc_parser_l2_ptl_entry_t*, ctc_parser_l3_type_t*);
    int32(*ctc_parser_get_l3flex_ctl)(uint8, ctc_parser_l3flex_ctl_t*);
    int32(*ctc_parser_get_layer4_parser_ctl)(ctc_parser_layer4_tbl_flags_t, ctc_parser_layer4_parser_ctl_t*);
    int32(*ctc_parser_get_max_length_filed)(uint16*);
    int32(*ctc_parser_get_mpls_ctl)(ctc_parser_mpls_ctl_fld_t*);
    int32(*ctc_parser_get_parser_quad_vlan_en)(uint8*);
    int32(*ctc_parser_get_pbb_parser_ctl)(ctc_parser_pbb_ctl_t*);
    int32(*ctc_parser_get_snap_allow_none_zero_oui)(uint8*);
    int32(*ctc_parser_get_tpid)(ctc_parser_l2_tpid_t, uint16*);
    int32(*ctc_parser_get_vlan_parser_num)(uint8*);
    int32(*ctc_parser_init)(void*);
    int32(*ctc_parser_l2_enable_l3_type)(ctc_parser_l3_type_t, bool);
    int32(*ctc_parser_l3_enable_l4_type)(ctc_parser_l4_type_t, bool);
    int32(*ctc_parser_remove_l2_type)(uint8);
    int32(*ctc_parser_remove_l3_type)(uint8);
    int32(*ctc_parser_set_ip_hash_ctl)(ctc_parser_ip_hash_ctl_t*);
    int32(*ctc_parser_set_ipv6_ctl)(uint8, ctc_parser_ipv6_ctl_t*);
    int32(*ctc_parser_set_l2flex_ctl)(uint8, ctc_parser_l2flex_ctl_t*);
    int32(*ctc_parser_set_l2_hash)(ctc_parser_l2_ctl_fld_t*);
    int32(*ctc_parser_set_l3flex_ctl)(uint8, ctc_parser_l3flex_ctl_t*);
    int32(*ctc_parser_set_layer4_parser_ctl)(ctc_parser_layer4_tbl_flags_t, ctc_parser_layer4_parser_ctl_t*);
    int32(*ctc_parser_set_layer4_type)(uint8, ctc_parser_l4_ptl_entry_t*);
    int32(*ctc_parser_set_max_length_filed)(uint16);
    int32(*ctc_parser_set_mpls_ctl)(ctc_parser_mpls_ctl_fld_t*);
    int32(*ctc_parser_set_parser_quad_vlan_en)(uint8);
    int32(*ctc_parser_set_pbb_parser_ctl)(ctc_parser_pbb_ctl_t*);
    int32(*ctc_parser_set_snap_allow_none_zero_oui)(uint8);
    int32(*ctc_parser_set_tpid)(ctc_parser_l2_tpid_t, uint16);
    int32(*ctc_parser_set_vlan_parser_num)(uint8);
    /*##pdu##*/
    int32(*ctc_l2pdu_classify_l2pdu)(ctc_pdu_l2pdu_type_t, uint8, ctc_pdu_l2pdu_key_t*);
    int32(*ctc_l2pdu_get_classified_key)(ctc_pdu_l2pdu_type_t, uint8, ctc_pdu_l2pdu_key_t*);
    int32(*ctc_l2pdu_get_global_action)(ctc_pdu_l2pdu_type_t, uint8, ctc_pdu_global_l2pdu_action_t*);
    int32(*ctc_l2pdu_get_port_action)(uint16, uint8, ctc_pdu_port_l2pdu_action_t*);
    int32(*ctc_l2pdu_set_global_action)(ctc_pdu_l2pdu_type_t, uint8, ctc_pdu_global_l2pdu_action_t*);
    int32(*ctc_l2pdu_set_port_action)(uint16, uint8, ctc_pdu_port_l2pdu_action_t);
    int32(*ctc_l3pdu_classify_l3pdu)(ctc_pdu_l3pdu_type_t, uint8, ctc_pdu_l3pdu_key_t*);
    int32(*ctc_l3pdu_get_classified_key)(ctc_pdu_l3pdu_type_t, uint8, ctc_pdu_l3pdu_key_t*);
    int32(*ctc_l3pdu_get_global_action)(ctc_pdu_l3pdu_type_t, uint8, ctc_pdu_global_l3pdu_action_t*);
    int32(*ctc_l3pdu_get_l3if_action)(uint16, uint8, ctc_pdu_l3if_l3pdu_action_t*);
    int32(*ctc_l3pdu_set_global_action)(ctc_pdu_l3pdu_type_t, uint8, ctc_pdu_global_l3pdu_action_t*);
    int32(*ctc_l3pdu_set_l3if_action)(uint16, uint8, ctc_pdu_l3if_l3pdu_action_t);
    int32(*ctc_pdu_init)(void*);
    /*##port##*/
    int32(*ctc_get_cpu_mac_en)(bool*);
    int32(*ctc_get_max_frame_size)(ctc_frame_size_t, uint16*);
    int32(*ctc_port_get_bridge_en)(uint16, bool*);
    int32(*ctc_port_get_cross_connet)(uint16, bool*);
    int32(*ctc_port_get_default_vlan)(uint16, uint16*);
    int32(*ctc_port_get_dot1q_type)(uint16, ctc_dot1q_type_t*);
    int32(*ctc_port_get_flow_ctl_en)(uint16, ctc_direction_t, uint32*);
    int32(*ctc_port_get_ipsg_en)(uint16, bool*);
    int32(*ctc_port_get_keep_vlan_tag)(uint16, bool*);
    int32(*ctc_port_get_learning_en)(uint16, bool*);
    int32(*ctc_port_get_mac_en)(uint16, bool*);
    int32(*ctc_port_get_max_frame)(uint16, ctc_frame_size_t*);
    int32(*ctc_port_get_mcast_flooding_en)(uint16, bool*);
    int32(*ctc_port_get_min_frame_size)(uint16, uint8*);
    int32(*ctc_port_get_outer_is_cvlan)(uint16, bool*);
    int32(*ctc_port_get_pading_en)(uint16, bool*);
    int32(*ctc_port_get_phy_if_en)(uint16, uint16*, bool*);
    int32(*ctc_port_get_port_check_en)(uint16, bool*);
    int32(*ctc_port_get_preamble)(uint16, uint8*);
    int32(*ctc_port_get_pro_vlan_en)(uint16, bool*);
    int32(*ctc_port_get_random_log_en)(uint16, ctc_direction_t, bool*);
    int32(*ctc_port_get_random_threshold)(uint16, ctc_direction_t, uint16*);
    int32(*ctc_port_get_receive_en)(uint16, bool*);
    int32(*ctc_port_get_reflective_bridge_en)(uint16, bool*);
    int32(*ctc_port_get_speed)(uint16, ctc_port_speed_t*);
    int32(*ctc_port_get_srcdiscard_en)(uint16, bool*);
    int32(*ctc_port_get_src_outer_is_svlan)(uint16, bool*);
    int32(*ctc_port_get_stag_tpid_index)(uint16, ctc_direction_t, uint8*);
    int32(*ctc_port_get_stretch_mode_en)(uint16, bool*);
    int32(*ctc_port_get_sub_if_en)(uint16, bool*);
    int32(*ctc_port_get_transmit_en)(uint16, bool*);
    int32(*ctc_port_get_ucast_flooding_en)(uint16, bool*);
    int32(*ctc_port_get_untag_dft_vid)(uint16, bool*, bool*);
    int32(*ctc_port_get_use_inner_cos)(uint16, bool*);
    int32(*ctc_port_get_use_outer_ttl)(uint16, bool*);
    int32(*ctc_port_get_vlan_classify_enable)(uint16, ctc_vlan_class_type_t*);
    int32(*ctc_port_get_vlanctl)(uint16, ctc_vlantag_ctl_t*);
    int32(*ctc_port_get_vlan_filter_en)(uint16, ctc_direction_t, bool*);
    int32(*ctc_port_get_vlan_mapping_en)(uint16, bool*);
    int32(*ctc_port_get_vlan_switching_en)(uint16, bool*);
    int32(*ctc_port_init)(void*);
    int32(*ctc_port_set_bridge_en)(uint16, bool);
    int32(*ctc_port_set_cross_connet)(uint16, bool);
    int32(*ctc_port_set_default_vlan)(uint16, uint16);
    int32(*ctc_port_set_dot1q_type)(uint16, ctc_dot1q_type_t);
    int32(*ctc_port_set_flow_ctl_en)(uint16, ctc_direction_t, uint32);
    int32(*ctc_port_set_ipsg_en)(uint16, bool);
    int32(*ctc_port_set_keep_vlan_tag)(uint16, bool);
    int32(*ctc_port_set_learning_en)(uint16, bool);
    int32(*ctc_port_set_loopback)(ctc_port_lbk_param_t*);
    int32(*ctc_port_set_mac_en)(uint16, bool);
    int32(*ctc_port_set_max_frame)(uint16, ctc_frame_size_t);
    int32(*ctc_port_set_mcast_flooding_en)(uint16, bool);
    int32(*ctc_port_set_min_frame_size)(uint16, uint8);
    int32(*ctc_port_set_outer_is_cvlan)(uint16, bool);
    int32(*ctc_port_set_pading_en)(uint16, bool);
    int32(*ctc_port_set_phy_if_en)(uint16, bool);
    int32(*ctc_port_set_port_check_en)(uint16, bool);
    int32(*ctc_port_set_preamble)(uint16, uint8);
    int32(*ctc_port_set_pro_vlan_en)(uint16, bool);
    int32(*ctc_port_set_random_log_en)(uint16, ctc_direction_t, bool);
    int32(*ctc_port_set_random_threshold)(uint16, ctc_direction_t, uint16);
    int32(*ctc_port_set_receive_en)(uint16, bool);
    int32(*ctc_port_set_reflective_bridge_en)(uint16, bool);
    int32(*ctc_port_set_speed)(uint16, ctc_port_speed_t);
    int32(*ctc_port_set_srcdiscard_en)(uint16, bool);
    int32(*ctc_port_set_src_outer_is_svlan)(uint16, bool);
    int32(*ctc_port_set_stag_tpid_index)(uint16, ctc_direction_t, uint8);
    int32(*ctc_port_set_stretch_mode_en)(uint16, bool);
    int32(*ctc_port_set_sub_if_en)(uint16, bool);
    int32(*ctc_port_set_transmit_en)(uint16, bool);
    int32(*ctc_port_set_ucast_flooding_en)(uint16, bool);
    int32(*ctc_port_set_untag_dft_vid)(uint16, bool, bool);
    int32(*ctc_port_set_use_inner_cos)(uint16, bool);
    int32(*ctc_port_set_use_outer_ttl)(uint16, bool);
    int32(*ctc_port_set_vlan_classify_disable)(uint16, ctc_vlan_class_type_t);
    int32(*ctc_port_set_vlan_classify_enable)(uint16, ctc_vlan_class_type_t);
    int32(*ctc_port_set_vlanctl)(uint16, ctc_vlantag_ctl_t);
    int32(*ctc_port_set_vlan_filter_en)(uint16, ctc_direction_t, bool);
    int32(*ctc_port_set_vlan_mapping_en)(uint16, bool);
    int32(*ctc_port_set_vlan_switching_en)(uint16, bool);
    int32(*ctc_set_cpu_mac_en)(bool);
    int32(*ctc_set_max_frame_size)(ctc_frame_size_t, uint16);
    /*##ptp##*/
    /*##queue##*/
    int32(*ctc_channel_shape_global_enable)(bool);
    int32(*ctc_create_service)(uint16, uint8);
    int32(*ctc_get_channel_shape_global_enable)(bool*);
    int32(*ctc_get_group_shape)(ctc_group_shape_cfg_t*);
    int32(*ctc_get_group_shape_global_enable)(bool*);
    int32(*ctc_get_per_service_queue_num)(uint8*);
    int32(*ctc_get_port_queue_class)(uint16, uint8, uint8*);
    int32(*ctc_get_port_queue_drop)(uint16, uint8, ctc_queue_drop_t*);
    int32(*ctc_get_port_queue_shape)(uint16, uint8, ctc_queue_shape_t*);
    int32(*ctc_get_port_queue_shape_profile_num)(uint32*);
    int32(*ctc_get_port_queue_stats)(uint16, uint8, ctc_queue_stats_t*);
    int32(*ctc_get_port_queue_wdrr_weight)(uint16, uint8, uint16*);
    int32(*ctc_get_port_shape)(uint16, ctc_port_shape_t*);
    int32(*ctc_get_queue_shape_global_enable)(bool*);
    int32(*ctc_get_queue_stats_enable)(bool*);
    int32(*ctc_get_service_queue_class)(ctc_queue_type_t, uint16, uint8, uint8*);
    int32(*ctc_get_service_queue_drop)(ctc_queue_type_t, uint16, uint8, ctc_queue_drop_t*);
    int32(*ctc_get_service_queue_enable)(bool*);
    int32(*ctc_get_service_queue_shape)(ctc_queue_type_t, uint16, uint8, ctc_queue_shape_t*);
    int32(*ctc_get_service_queue_stats)(ctc_queue_type_t, uint16, uint8, ctc_queue_stats_t*);
    int32(*ctc_get_service_queue_wdrr_weight)(ctc_queue_type_t, uint16, uint8, uint16*);
    int32(*ctc_group_shape_global_enable)(bool);
    int32(*ctc_qos_flow_id_global_enable)(bool);
    int32(*ctc_qos_get_flow_id_global_enable)(bool*);
    int32(*ctc_queue_get_resrc_mgr_global_enable)(bool*);
    int32(*ctc_queue_init)(ctc_queue_global_cfg_t*);
    int32(*ctc_queue_resrc_mgr_global_enable)(bool);
    int32(*ctc_queue_shape_global_enable)(bool);
    int32(*ctc_queue_shape_ipg_global_enable)(bool);
    int32(*ctc_queue_stats_global_enable)(bool);
    int32(*ctc_remove_service)(uint16);
    int32(*ctc_reset_port_queue_stats)(uint16, uint8);
    int32(*ctc_reset_service_queue_stats)(ctc_queue_type_t, uint16, uint8);
    int32(*ctc_set_group_shape)(ctc_group_shape_cfg_t*);
    int32(*ctc_set_port_queue_class)(uint16, uint8, uint8);
    int32(*ctc_set_port_queue_drop)(uint16, uint8, ctc_queue_drop_t*);
    int32(*ctc_set_port_queue_shape)(uint16, uint8, ctc_queue_shape_t*);
    int32(*ctc_set_port_queue_wdrr_weight)(uint16, uint8, uint16);
    int32(*ctc_set_port_shape)(uint16, ctc_port_shape_t*);
    int32(*ctc_set_queue_priority_map)(ctc_queue_pri_map_t*);
    int32(*ctc_set_queue_size_mode)(uint8);
    int32(*ctc_set_queue_wdrr_weight_mtu)(uint32);
    int32(*ctc_set_service_queue_class)(ctc_queue_type_t, uint16, uint8, uint8);
    int32(*ctc_set_service_queue_drop)(ctc_queue_type_t, uint16, uint8, ctc_queue_drop_t*);
    int32(*ctc_set_service_queue_shape)(ctc_queue_type_t, uint16, uint8, ctc_queue_shape_t*);
    int32(*ctc_set_service_queue_wdrr_weight)(ctc_queue_type_t, uint16, uint8, uint16);
    int32(*ctc_unset_group_shape)(ctc_group_shape_cfg_t*);
    int32(*ctc_unset_port_queue_shape)(uint16, uint8);
    int32(*ctc_unset_port_shape)(uint16);
    int32(*ctc_unset_service_queue_shape)(ctc_queue_type_t, uint16, uint8);
    /*##register##*/
    int32(*ctc_global_ctl_get)(ctc_global_control_type_t, void*);
    int32(*ctc_global_ctl_set)(ctc_global_control_type_t, void*);
    int32(*ctc_register_init)(void);
    /*##security##*/
    /*##stats##*/
    int32(*ctc_stats_get_drop_packet_stats_enable)(bool*);
    int32(*ctc_stats_get_fwd_stats_enable)(ctc_stats_fwd_type_t, bool*);
    int32(*ctc_stats_get_global_cfg)(ctc_stats_property_param_t, ctc_stats_property_t*);
    int32(*ctc_stats_get_global_fwd_stats)(ctc_direction_t, ctc_stats_global_fwd_t*);
    int32(*ctc_stats_get_log_option)(uint16, ctc_direction_t, ctc_stats_basic_t*);
    int32(*ctc_stats_get_mac_stats_cfg)(uint16, ctc_mac_stats_prop_type_t, ctc_mac_stats_property_t*);
    int32(*ctc_stats_get_mac_stats)(uint16, ctc_mac_stats_dir_t, ctc_mac_stats_t*);
    int32(*ctc_stats_get_port_stats_cfg)(ctc_direction_t, ctc_stats_port_stats_option_type_t*);
    int32(*ctc_stats_get_port_stats)(uint16, ctc_direction_t, ctc_stats_port_t*);
    int32(*ctc_stats_init)(void*);
    int32(*ctc_stats_intr_callback_func)(uint8*);
    int32(*ctc_stats_reset_global_fwd_stats)(ctc_direction_t);
    int32(*ctc_stats_reset_log_option)(uint16, ctc_direction_t);
    int32(*ctc_stats_reset_mac_stats)(uint16, ctc_mac_stats_dir_t);
    int32(*ctc_stats_reset_port_stats)(uint16, ctc_direction_t);
    int32(*ctc_stats_set_drop_packet_stats_enable)(bool);
    int32(*ctc_stats_set_global_cfg)(ctc_stats_property_param_t, ctc_stats_property_t);
    int32(*ctc_stats_set_mac_stats_cfg)(uint16, ctc_mac_stats_prop_type_t, ctc_mac_stats_property_t);
    int32(*ctc_stats_set_port_stats_cfg)(ctc_direction_t, ctc_stats_port_stats_option_type_t);
    /*##stp##*/
    int32(*ctc_stp_clear_all_inst_state)(uint16);
    int32(*ctc_stp_get_state)(uint16, uint8, uint8*);
    int32(*ctc_stp_get_vlan_stpid)(uint16, uint8*);
    int32(*ctc_stp_set_state)(uint16, uint8, uint8);
    int32(*ctc_stp_set_vlan_stpid)(uint16, uint8);
    /*##sync_ether##*/
    /*##usrid##*/
    int32(*ctc_usrid_init)(void*);
    /*##vlan##*/
    int32(*ctc_vlan_add_port)(uint16, uint16);
    int32(*ctc_vlan_add_vlan_classification_default_entry)(ctc_vlan_class_type_t, ctc_vlan_miss_t*);
    int32(*ctc_vlan_add_vlan_classification_entry)(ctc_vlan_class_t*);
    int32(*ctc_vlan_add_vlan_mapping_default_entry)(uint16, ctc_vlan_miss_t*);
    int32(*ctc_vlan_add_vlan_mapping_entry)(uint16, ctc_vlan_mapping_t*);
    int32(*ctc_vlan_create_vlan)(uint16);
    int32(*ctc_vlan_flush_vlan_classification_entry)(ctc_vlan_class_type_t);
    int32(*ctc_vlan_get_arp_excp_type)(uint16, ctc_exception_type_t*);
    int32(*ctc_vlan_get_bridge_en)(uint16, bool*);
    int32(*ctc_vlan_get_dhcp_excp_type)(uint16, ctc_exception_type_t*);
    int32(*ctc_vlan_get_fid)(uint16, uint16*);
    int32(*ctc_vlan_get_igmp_snoop_en)(uint16, bool*);
    int32(*ctc_vlan_get_learning_en)(uint16, bool*);
    int32(*ctc_vlan_get_ports)(uint16, ctc_port_bitmap_t*);
    int32(*ctc_vlan_get_receive_en)(uint16, bool*);
    int32(*ctc_vlan_get_replace_dspc_en)(uint16, bool*);
    int32(*ctc_vlan_get_transmit_en)(uint16, bool*);
    int32(*ctc_vlan_init)(ctc_vlan_global_cfg_t*);
    int32(*ctc_vlan_remove_port)(uint16, uint16);
    int32(*ctc_vlan_remove_vlan_classification_default_entry)(ctc_vlan_class_type_t);
    int32(*ctc_vlan_remove_vlan_classification_entry)(ctc_vlan_class_t*);
    int32(*ctc_vlan_remove_vlan_mapping_all_by_port)(uint16);
    int32(*ctc_vlan_remove_vlan_mapping_default_entry)(uint16);
    int32(*ctc_vlan_remove_vlan_mapping_entry)(uint16, ctc_vlan_mapping_t*);
    int32(*ctc_vlan_remove_vlan)(uint16);
    int32(*ctc_vlan_set_arp_excp_type)(uint16, ctc_exception_type_t);
    int32(*ctc_vlan_set_bridge_en)(uint16, bool);
    int32(*ctc_vlan_set_dhcp_excp_type)(uint16, ctc_exception_type_t);
    int32(*ctc_vlan_set_fid)(uint16, uint16);
    int32(*ctc_vlan_set_igmp_snoop_en)(uint16, bool);
    int32(*ctc_vlan_set_learning_en)(uint16, bool);
    int32(*ctc_vlan_set_receive_en)(uint16, bool);
    int32(*ctc_vlan_set_replace_dscp_en)(uint16, bool);
    int32(*ctc_vlan_set_transmit_en)(uint16, bool);
};
typedef struct ctc_api_s ctc_api_t;
/**********************************************************
 * 
 * Functions
 * 
 **********************************************************/
extern int32 ctc_install_api(void);
extern int32 ctc_uninstall_api(void);
extern int32 ctc_acl_entry_add(uint32 label_id, uint32 entry_id, ctc_aclqos_entry_t* p_entry);
extern int32 ctc_acl_entry_invalid(uint32 label_id, ctc_aclqos_key_type_t entry_type, uint32 entry_id, bool invalid);
extern int32 ctc_acl_entry_remove_all(uint32 label_id, ctc_aclqos_key_type_t entry_type);
extern int32 ctc_acl_entry_remove(uint32 label_id, ctc_aclqos_key_type_t entry_type, uint32 entry_id);
extern int32 ctc_acl_entry_set_action(uint32 label_id, ctc_aclqos_key_type_t entry_type, uint32 entry_id, ctc_aclqos_action_t* p_action);
extern int32 ctc_acl_entry_stats_get(uint32 label_id, ctc_aclqos_key_type_t entry_type, uint32 entry_id, ctc_stats_basic_t* p_stats);
extern int32 ctc_acl_entry_stats_reset(uint32 label_id, ctc_aclqos_key_type_t entry_type, uint32 entry_id);
extern int32 ctc_acl_entry_unset_action(uint32 label_id, ctc_aclqos_key_type_t entry_type, uint32 entry_id, ctc_aclqos_action_t* p_action);
extern int32 ctc_acl_get_permit_entry_stats_all(uint32 label_id, ctc_stats_basic_t* entry_stats);
extern int32 ctc_acl_pbr_enable(uint16 l3if_id, bool enable);
extern int32 ctc_acl_pbr_label_create(uint32 label_id);
extern int32 ctc_acl_pbr_label_remove(uint32 label_id);
extern int32 ctc_acl_pbr_label_set(uint16 l3if_id, uint32 label_id);
extern int32 ctc_acl_pbr_label_unset(uint16 l3if_id);
extern int32 ctc_acl_port_enable(uint16 gport, ctc_direction_t dir, bool enable);
extern int32 ctc_acl_port_label_create(uint32 label_id);
extern int32 ctc_acl_port_label_remove(uint32 label_id);
extern int32 ctc_acl_port_label_set(uint16 gport, ctc_direction_t dir, uint32 label_id);
extern int32 ctc_acl_port_label_unset(uint16 gport, ctc_direction_t dir);
extern int32 ctc_aclqos_init(ctc_aclqos_global_cfg_t* aclqos_global_cfg);
extern int32 ctc_acl_set_l2_high_priority(uint16 gport, ctc_direction_t dir, bool l2_high_prio);
extern int32 ctc_acl_tiny_fragment_default_entry_add(bool deny);
extern int32 ctc_acl_vlan_enable(uint16 vid, ctc_direction_t dir, bool enable);
extern int32 ctc_acl_vlan_label_create(uint32 label_id);
extern int32 ctc_acl_vlan_label_remove(uint32 label_id);
extern int32 ctc_acl_vlan_label_set(uint16 vid, ctc_direction_t dir, uint32 label_id);
extern int32 ctc_acl_vlan_label_unset(uint16 vid, ctc_direction_t dir);
extern int32 ctc_qos_entry_add(uint32 label_id, uint32 entry_id, ctc_aclqos_entry_t* p_entry);
extern int32 ctc_qos_entry_invalid(uint32 label_id, ctc_aclqos_key_type_t entry_type, uint32 entry_id, bool invalid);
extern int32 ctc_qos_entry_remove_all(uint32 label_id, ctc_aclqos_key_type_t entry_type);
extern int32 ctc_qos_entry_remove(uint32 label_id, ctc_aclqos_key_type_t entry_type, uint32 entry_id);
extern int32 ctc_qos_entry_set_action(uint32 label_id, ctc_aclqos_key_type_t entry_type, uint32 entry_id, ctc_aclqos_action_t* p_action);
extern int32 ctc_qos_entry_stats_get(uint32 label_id, ctc_aclqos_label_type_t label_type, ctc_aclqos_key_type_t entry_type, uint32 entry_id, ctc_stats_basic_t* p_stats);
extern int32 ctc_qos_entry_stats_reset(uint32 label_id, ctc_aclqos_key_type_t entry_type, uint32 entry_id);
extern int32 ctc_qos_entry_unset_action(uint32 label_id, ctc_aclqos_key_type_t entry_type, uint32 entry_id, ctc_aclqos_action_t* p_action);
extern int32 ctc_qos_flow_policer_create(ctc_qos_policer_t* p_policer, uint32 plc_id);
extern int32 ctc_qos_flow_policer_remove(uint32 plc_id);
extern int32 ctc_qos_flow_policer_update(uint32 plc_id, ctc_qos_policer_t* p_policer);
extern int32 ctc_qos_get_flow_policer_stats(uint32 plc_id, ctc_qos_policer_stats_t* p_stats);
extern int32 ctc_qos_get_flow_policer(uint32 plc_id, ctc_qos_policer_t* p_policer);
extern int32 ctc_qos_get_policer_global_enable(bool* p_enable);
extern int32 ctc_qos_get_policer_stats_global_enable(bool* p_enable);
extern int32 ctc_qos_get_port_cfi(uint16 gport, uint8* p_cfi);
extern int32 ctc_qos_get_port_cos(uint16 gport, uint8* p_cos);
extern int32 ctc_qos_get_port_domain(uint16 gport, ctc_direction_t dir, uint8* p_domain);
extern int32 ctc_qos_get_port_policer_stats(uint16 gport, ctc_direction_t dir, uint8 phb_offset, ctc_qos_policer_stats_t* p_stats);
extern int32 ctc_qos_get_port_policer(uint32 gport, ctc_direction_t dir, uint8 phb_offset, ctc_qos_policer_t* p_policer);
extern int32 ctc_qos_get_port_replace_enable(uint16 gport, ctc_qos_replace_t replace, bool* p_enable);
extern int32 ctc_qos_get_port_trust(uint16 gport, ctc_qos_trust_t* p_trust);
extern int32 ctc_qos_policer_global_enable(bool enable);
extern int32 ctc_qos_policer_stats_global_enable(bool enable);
extern int32 ctc_qos_port_enable(uint16 gport, ctc_direction_t dir, bool enable);
extern int32 ctc_qos_port_label_create(uint32 label_id);
extern int32 ctc_qos_port_label_remove(uint32 label_id);
extern int32 ctc_qos_port_label_set(uint16 gport, ctc_direction_t dir, uint32 label_id);
extern int32 ctc_qos_port_label_unset(uint16 gport, ctc_direction_t dir);
extern int32 ctc_qos_reset_flow_policer_stats(uint32 plc_id);
extern int32 ctc_qos_reset_port_policer_stats(uint16 gport, ctc_direction_t dir, uint8 phb_offset);
extern int32 ctc_qos_set_cos_priority_color_map(uint8 domain, uint8 cos, uint8 cfi, uint8 priority, ctc_qos_color_t color);
extern int32 ctc_qos_set_default_domain(void);
extern int32 ctc_qos_set_dscp_priority_color_map(uint8 domain, uint8 dscp, uint8 priority, ctc_qos_color_t color);
extern int32 ctc_qos_set_exp_priority_color_map(uint8 domain, uint8 exp, uint8 priority, ctc_qos_color_t color);
extern int32 ctc_qos_set_flow_policer_first_en(ctc_direction_t dir, bool enable);
extern int32 ctc_qos_set_ip_prec_priority_color_map(uint8 domain, uint8 ip_prec, uint8 priority, ctc_qos_color_t color);
extern int32 ctc_qos_set_l2_high_priority(uint16 gport, ctc_direction_t dir, bool l2_high_prio);
extern int32 ctc_qos_set_policer_ipg_global_enable(bool enable);
extern int32 ctc_qos_set_port_cfi(uint16 gport, uint8 cfi);
extern int32 ctc_qos_set_port_cos(uint16 gport, uint8 cos);
extern int32 ctc_qos_set_port_domain(uint16 gport, ctc_direction_t dir, uint8 domain);
extern int32 ctc_qos_set_port_policer(uint16 gport, ctc_direction_t dir, uint8 phb_offset, ctc_qos_policer_t* p_policer);
extern int32 ctc_qos_set_port_replace_enable(uint16 gport, ctc_qos_replace_t replace, bool enable);
extern int32 ctc_qos_set_port_trust(uint16 gport, ctc_qos_trust_t trust);
extern int32 ctc_qos_set_priority_color_cos_map(uint8 domain, uint8 priority, ctc_qos_color_t color, uint8 cos, uint8 cfi);
extern int32 ctc_qos_set_priority_color_dscp_map(uint8 domain, uint8 priority, ctc_qos_color_t color, uint8 dscp);
extern int32 ctc_qos_set_priority_color_exp_map(uint8 domain, uint8 priority, ctc_qos_color_t color, uint8 exp);
extern int32 ctc_qos_set_sequential_policer(bool enable);
extern int32 ctc_qos_set_service_policer(uint16 service_id, ctc_qos_policer_t* p_policer);
extern int32 ctc_qos_tiny_fragment_default_entry_add(bool deny);
extern int32 ctc_qos_unset_port_policer(uint16 gport, ctc_direction_t dir, uint8 phb_offset);
extern int32 ctc_qos_unset_service_policer(uint16 service_id);
extern int32 ctc_qos_vlan_enable(uint16 vid, ctc_direction_t dir, bool enable);
extern int32 ctc_qos_vlan_label_create(uint32 label_id);
extern int32 ctc_qos_vlan_label_remove(uint32 label_id);
extern int32 ctc_qos_vlan_label_set(uint16 vid, ctc_direction_t dir, uint32 label_id);
extern int32 ctc_qos_vlan_label_unset(uint16 vid, ctc_direction_t dir);
extern int32 ctc_service_entry_add(ctc_aclqos_entry_oper_t* p_entry_oper);
extern int32 ctc_service_entry_remove_all(uint16 service_id, ctc_aclqos_key_type_t entry_type);
extern int32 ctc_service_entry_remove(ctc_aclqos_entry_oper_t* p_entry_oper);
extern int32 ctc_service_entry_set_action(uint32 label_id, ctc_aclqos_key_type_t entry_type, uint32 entry_id, ctc_aclqos_action_t* p_action);
extern int32 ctc_service_label_create(uint16 service_id);
extern int32 ctc_service_label_remove(uint16 service_id);
extern int32 ctc_chip_init(uint8 lchip_num);
extern int32 ctc_data_path_init(ctc_chip_reset_cb reset_cb, ctc_chip_datapath_t* chip_datapath, char* datapath_config_file);
extern int32 ctc_get_chip_clock(uint16* freq);
extern int32 ctc_get_gchip_id(uint8 lchip_id, uint8* gchip_id);
extern int32 ctc_get_local_chip_num(uint8* lchip_num);
extern int32 ctc_parity_error_init(void);
extern int32 ctc_set_chip_global_cfg(ctc_chip_global_cfg_t* chip_cfg);
extern int32 ctc_set_gchip_id(uint8 lchip_id, uint8 gchip_id);
extern int32 ctc_cpu_traffic_init(void);
extern int32 ctc_cpu_traffic_set_exception(uint8 excp, uint16 dest_id, ctc_excp_dest_type_t dest_type);
extern int32 ctc_cpu_traffic_set_fatal_exception(uint8 excp, uint16 dest_id, ctc_excp_dest_type_t dest_type);
extern int32 ctc_cpu_traffic_set_fwd_queue_class(uint8 qid, uint8 class);
extern int32 ctc_cpu_traffic_set_fwd_queue_shape(uint8 qid, ctc_queue_shape_t* p_shape);
extern int32 ctc_cpu_traffic_unset_fwd_queue_shape(uint8 qid);
extern int32 ctc_packet_tocpu_limit_individual_rate(ctc_packet_tocpu_reason_t reason, uint8 sub_idx, uint32 rate);
extern int32 ctc_packet_tocpu_limit_total_rate(uint32 rate);
extern int32 ctc_packet_tocpu_set_reason_class(ctc_packet_tocpu_reason_t reason, uint8 sub_idx, uint8 class);
extern int32 ctc_ftm_mem_alloc(ctc_ftm_profile_info_t* ctc_profile_info);
extern int32 ctc_ftm_set_default_profile(ctc_ftm_profile_info_t* ctc_profile_info);
extern int32 ctc_ftm_show_alloc_info(void);
extern int32 ctc_internal_port_allocate(ctc_internal_port_assign_para_t* port_assign);
extern int32 ctc_internal_port_init(void);
extern int32 ctc_internal_port_release(ctc_internal_port_assign_para_t* port_assign);
extern int32 ctc_internal_port_set(ctc_internal_port_assign_para_t* port_assign);
extern int32 ctc_interrupt_clear_fatal_intr(uint8 lchip, uint8 type);
extern int32 ctc_interrupt_clear_normal_intr(uint8 lchip, uint8 type);
extern int32 ctc_interrupt_clear_sub_normal_intr(uint8 lchip, ctc_interrupt_normal_intr_type_t type, uint8 bit_offset);
extern int32 ctc_interrupt_disable_fatal_intr(uint8 lchip, uint8 type);
extern int32 ctc_interrupt_disable_normal_intr(uint8 lchip, uint8 type);
extern int32 ctc_interrupt_disable_sub_normal_intr(uint8 lchip, ctc_interrupt_normal_intr_type_t type, uint8 bit_offset);
extern int32 ctc_interrupt_enable_fatal_intr(uint8 lchip, uint8 type);
extern int32 ctc_interrupt_enable_normal_intr(uint8 lchip, uint8 type);
extern int32 ctc_interrupt_enable_sub_normal_intr(uint8 lchip, ctc_interrupt_normal_intr_type_t type, uint8 bit_offset);
extern int32 ctc_interrupt_get_fatal_intr_status(uint8 lchip, uint8 type, ctc_interrupt_fatal_intr_status_t* status);
extern int32 ctc_interrupt_get_normal_all_intr_status(uint8 lchip, uint32* p_bitmap);
extern int32 ctc_interrupt_get_normal_intr_status(uint8 lchip, uint8 type, bool* p_enable);
extern int32 ctc_interrupt_reg_init_end(void);
extern int32 ctc_interrupt_reg_init_start(void);
extern int32 ctc_ipuc_add(ctc_ipuc_param_t* p_ipuc_info);
extern int32 ctc_ipuc_add_default_entry(ctc_ipuc_param_t* p_ipuc_info);
extern int32 ctc_ipuc_cpu_rpf_check(bool enable);
extern int32 ctc_ipuc_init(void* ipuc_global_cfg);
extern int32 ctc_ipuc_ipv6_enable(bool enable);
extern int32 ctc_ipuc_remove(ctc_ipuc_param_t* p_ipuc_info);
extern int32 ctc_ipuc_set_lookup_ctl(ctc_ipuc_lookup_ctl_t* p_lookup_ctl_info);
extern int32 ctc_ipuc_set_route_ctl(ctc_ipuc_route_ctl_t* p_route_ctl_info);
extern int32 ctc_l2_add_default_entry(ctc_l2dflt_addr_t* l2dflt_addr);
extern int32 ctc_l2_add_fdb(ctc_l2_addr_t* l2_addr);
extern int32 ctc_l2_add_fdb_with_nexthop(ctc_l2_addr_t* l2_addr, uint32 nhp_id);
extern int32 ctc_l2_add_port_to_default_entry(ctc_l2dflt_addr_t* l2dflt_addr);
extern int32 ctc_l2_fdb_flush(ctc_l2_fdb_flush_t* pFlush);
extern int32 ctc_l2_fdb_init(void* l2_fdb_global_cfg);
extern int32 ctc_l2_get_default_entry_features(ctc_l2dflt_addr_t* l2dflt_addr);
extern int32 ctc_l2_get_fdb_by_index(uint32 index,ctc_l2_addr_t* l2_addr);
extern int32 ctc_l2_get_fdb_count(ctc_l2_fdb_query_t* pQuery);
extern int32 ctc_l2_get_fdb_entry(ctc_l2_fdb_query_t* pQuery, ctc_l2_fdb_query_rst_t* query_rst);
extern int32 ctc_l2mcast_add_addr(ctc_l2_mcast_addr_t* l2mc_addr);
extern int32 ctc_l2mcast_add_member(ctc_l2_mcast_addr_t* l2mc_addr);
extern int32 ctc_l2mcast_remove_addr(ctc_l2_mcast_addr_t* l2mc_addr);
extern int32 ctc_l2mcast_remove_member(ctc_l2_mcast_addr_t* l2mc_addr);
extern int32 ctc_l2_remove_default_entry(ctc_l2dflt_addr_t* l2dflt_addr);
extern int32 ctc_l2_remove_fdb_by_index(uint32 index);
extern int32 ctc_l2_remove_fdb(ctc_l2_addr_t* l2_addr);
extern int32 ctc_l2_remove_port_from_default_entry(ctc_l2dflt_addr_t* l2dflt_addr);
extern int32 ctc_l2_set_default_entry_features(ctc_l2dflt_addr_t* l2dflt_addr);
extern int32 ctc_l3if_add_vmac_low_8bit(uint16 l3if_id,ctc_l3if_vmac_t* p_l3if_vmac);
extern int32 ctc_l3if_create(uint16 l3if_id, ctc_l3if_t* p_l3_if);
extern int32 ctc_l3if_delete(uint16 l3if_id, ctc_l3if_t* p_l3_if);
extern int32 ctc_l3if_get_property(uint16 l3if_id,ctc_l3if_property_t l3if_prop,uint32* p_value);
extern int32 ctc_l3if_get_router_mac(mac_addr_t mac_addr);
extern int32 ctc_l3if_get_vmac_low_8bit(uint16 l3if_id,ctc_l3if_vmac_t* p_l3if_vmac);
extern int32 ctc_l3if_get_vmac_prefix(uint8 prefix_type, mac_addr_t mac_40bit);
extern int32 ctc_l3if_init(void* l3if_global_cfg);
extern int32 ctc_l3if_remove_vmac_low_8bit(uint16 l3if_id,ctc_l3if_vmac_t* p_l3if_vmac);
extern int32 ctc_l3if_set_property(uint16 l3if_id,ctc_l3if_property_t l3if_prop,uint32 value);
extern int32 ctc_l3if_set_router_mac(mac_addr_t mac_addr);
extern int32 ctc_l3if_set_vmac_prefix(uint8 prefix_type, mac_addr_t mac_40bit);
extern int32 ctc_aging_get_aging_status(uint8 lchip, uint32 aging_index, ctc_aging_status_t* age_status);
extern int32 ctc_aging_get_property(ctc_aging_prop_t aging_prop, uint32* value);
extern int32 ctc_aging_read_aging_fifo(uint8 lchip, ctc_aging_fifo_info_t* fifo_info);
extern int32 ctc_learning_set_learning_en(bool enable);
extern int32 ctc_aging_set_property(ctc_aging_prop_t aging_prop, uint32 value);
extern int32 ctc_get_learning_action(ctc_learning_action_info_t* p_learning_action);
extern int32 ctc_learning_aging_init(void* global_cfg);
extern int32 ctc_learning_clear_learning_cache(uint8 lchip, uint16 entry_vld_bitmap);
extern int32 ctc_learning_get_cache_entry_valid_bitmap(uint8 lchip, uint16* entry_vld_bitmap);
extern int32 ctc_learning_read_learning_cache(uint8 lchip, uint16 entry_vld_bitmap, ctc_learning_cache_t* l2_lc);
extern int32 ctc_set_learning_action(ctc_learning_action_info_t* p_learning_action);
extern int32 ctc_linkagg_add_port(uint8 tid, uint16 gport);
extern int32 ctc_linkagg_create(uint8 tid);
extern int32 ctc_linkagg_get_1st_local_port(uint8 tid, uint16* p_gport,uint8* local_cnt);
extern int32 ctc_linkagg_init(void* linkagg_global_cfg);
extern int32 ctc_linkagg_remove_port(uint8 tid, uint16 gport);
extern int32 ctc_linkagg_remove(uint8 tid);
extern int32 ctc_linkagg_show_ports(uint8 tid, uint16* p_gports, uint8* cnt);
extern int32 ctc_mirror_get_mirror_discard(ctc_direction_t dir, ctc_mirror_discard_t discard_flag, bool* enable);
extern int32 ctc_mirror_get_port_info(uint16 gport, ctc_direction_t dir, bool* enable, uint8* session_id);
extern int32 ctc_mirror_get_vlan_info(uint16 vlan_id, ctc_direction_t dir, bool* enable, uint8* session_id);
extern int32 ctc_mirror_init(void* mirror_global_cfg);
extern int32 ctc_mirror_rspan_escape_en(bool enable);
extern int32 ctc_mirror_rspan_escape_mac(ctc_mirror_rspan_escape_t escape);
extern int32 ctc_mirror_rspan_set_dest(ctc_mirror_dest_t* mirror_info, uint32 nh_id);
extern int32 ctc_mirror_set_dest(ctc_mirror_dest_t* mirror);
extern int32 ctc_mirror_set_mirror_discard(ctc_direction_t dir, ctc_mirror_discard_t discard_flag, bool enable);
extern int32 ctc_mirror_set_port_disable(uint16 gport, ctc_direction_t dir);
extern int32 ctc_mirror_set_port_enable(uint16 gport, ctc_direction_t dir, uint8 session_id);
extern int32 ctc_mirror_set_vlan_disable(uint16 vlan_id, ctc_direction_t dir);
extern int32 ctc_mirror_set_vlan_enable(uint16 vlan_id, ctc_direction_t dir, uint8 session_id);
extern int32 ctc_mirror_unset_dest(ctc_mirror_dest_t* mirror);
extern int32 ctc_mpls_add_ilm(ctc_mpls_ilm_t* p_mpls_ilm);
extern int32 ctc_mpls_add_l2vpn_pw(ctc_mpls_l2vpn_pw_t* p_mpls_pw);
extern int32 ctc_mpls_add_stats(ctc_mpls_stats_index_t* stats_index);
extern int32 ctc_mpls_del_ilm(ctc_mpls_ilm_t* p_mpls_ilm);
extern int32 ctc_mpls_del_l2vpn_pw(ctc_mpls_l2vpn_pw_t* p_mpls_pw);
extern int32 ctc_mpls_del_stats(ctc_mpls_stats_index_t* stats_index);
extern int32 ctc_mpls_get_ilm(uint32* nh_id, ctc_mpls_ilm_t* p_mpls_ilm);
extern int32 ctc_mpls_get_stats(ctc_mpls_stats_index_t* stats_index, ctc_stats_basic_t* p_stats);
extern int32 ctc_mpls_init(ctc_mpls_init_t* p_mpls_info);
extern int32 ctc_mpls_reset_in_sqn(uint8 index);
extern int32 ctc_mpls_reset_out_sqn(uint8 index);
extern int32 ctc_mpls_reset_stats(ctc_mpls_stats_index_t* stats_index);
extern int32 ctc_mpls_update_ilm(ctc_mpls_ilm_t* p_mpls_ilm);
extern int32 ctc_mpls_check_label_used(uint16 spaceid, uint32 label, bool *used);
extern int32 ctc_port_set_allow_mcast_mac_sa(uint16 gport, bool enable);
extern int32 ctc_ecmp_nh_create(ctc_nh_ecmp_creat_data_t* pdata);
extern int32 ctc_ecmp_nh_delete(uint32 nhid);
extern int32 ctc_ecmp_nh_update(ctc_nh_ecmp_update_data_t* pdata);
extern int32 ctc_egress_vlan_edit_create(uint32 nhid, ctc_vlan_edit_nh_param_t* p_nh_param);
extern int32 ctc_egress_vlan_edit_remove(uint32 nhid);
extern int32 ctc_flex_nh_create(uint32 nhid, ctc_flex_nh_param_t* p_nh_param);
extern int32 ctc_flex_nh_remove(uint32 nhid);
extern int32 ctc_iloop_nh_create(uint32 nhid, ctc_loopback_nexthop_param_t* p_nh_param);
extern int32 ctc_iloop_nh_remove(uint32 nhid);
extern int32 ctc_ipuc_nh_create(uint32 nhid, ctc_ip_nh_param_t* p_nh_param);
extern int32 ctc_ipuc_nh_remove(uint32 nhid);
extern int32 ctc_ipuc_nh_update(uint32 nhid, ctc_ip_nh_param_t* p_nh_param);
extern int32 ctc_l2_create_ucast_nh(uint16 gport, ctc_nh_param_brguc_sub_type_t nh_type);
extern int32 ctc_l2_delete_ucast_nh(uint16 gport);
extern int32 ctc_l2_get_ucast_nh(uint16 gport, ctc_nh_param_brguc_sub_type_t nh_type, uint32* nhid);
extern int32 ctc_mcast_nh_create(uint32 nhid, ctc_mcast_nh_param_group_t* p_nh_mcast_group);
extern int32 ctc_mcast_nh_delete(uint32 nhid);
extern int32 ctc_mcast_nh_update(uint32 nhid, ctc_mcast_nh_param_group_t* p_nh_mcast_group);
extern int32 ctc_mpls_nh_create(uint32 nhid, ctc_mpls_nexthop_param_t* p_nh_param);
extern int32 ctc_mpls_nh_remove(uint32 nhid);
extern int32 ctc_mpls_nh_update(uint32 nhid, ctc_mpls_nexthop_param_t* p_nh_param);
extern int32 ctc_nexthop_init(ctc_nh_global_cfg_t* nh_cfg);
extern int32 ctc_nh_add_stats(uint32 nhid);
extern int32 ctc_nh_del_stats(uint32 nhid);
extern int32 ctc_nh_get_stats(uint32 nhid, ctc_stats_basic_t* p_stats);
extern int32 ctc_nh_reset_stats(uint32 nhid);
extern int32 ctc_rspan_nh_create(uint32 nhid, uint32 dsnh_offset,ctc_rspan_nexthop_param_t* p_nh_param);
extern int32 ctc_rspan_nh_remove(uint32 nhid);
extern int32 ctc_parser_add_l2_type(uint8 index, ctc_parser_l2_ptl_entry_t* entry);
extern int32 ctc_parser_add_l3_type(uint8 index, ctc_parser_l3_ptl_entry_t* entry);
extern int32 ctc_parser_get_ip_hash_ctl(ctc_parser_ip_hash_ctl_t* hash_ctl);
extern int32 ctc_parser_get_ipv6_ctl(uint8 index, ctc_parser_ipv6_ctl_t* ipv6_ctl);
extern int32 ctc_parser_get_l2flex_ctl(uint8 index, ctc_parser_l2flex_ctl_t* l2flex_ctl);
extern int32 ctc_parser_get_l2_hash(ctc_parser_l2_ctl_fld_t* l2ctl);
extern int32 ctc_parser_get_l2_type(ctc_parser_l2_ptl_entry_t* p_entry, ctc_parser_l3_type_t* p_l3_type);
extern int32 ctc_parser_get_l3flex_ctl(uint8 index, ctc_parser_l3flex_ctl_t* l3flex_ctl);
extern int32 ctc_parser_get_layer4_parser_ctl(ctc_parser_layer4_tbl_flags_t tbl_flags, ctc_parser_layer4_parser_ctl_t* l4_parser_ctl);
extern int32 ctc_parser_get_max_length_filed(uint16* max_length);
extern int32 ctc_parser_get_mpls_ctl(ctc_parser_mpls_ctl_fld_t* mpls_ctl);
extern int32 ctc_parser_get_parser_quad_vlan_en(uint8* enable);
extern int32 ctc_parser_get_pbb_parser_ctl(ctc_parser_pbb_ctl_t* pbb_parser_ctl);
extern int32 ctc_parser_get_snap_allow_none_zero_oui(uint8* enable);
extern int32 ctc_parser_get_tpid(ctc_parser_l2_tpid_t type, uint16* tpid);
extern int32 ctc_parser_get_vlan_parser_num(uint8* vlan_num);
extern int32 ctc_parser_init(void* parser_global_cfg);
extern int32 ctc_parser_l2_enable_l3_type(ctc_parser_l3_type_t l3_type, bool enable);
extern int32 ctc_parser_l3_enable_l4_type(ctc_parser_l4_type_t l4_type, bool enable);
extern int32 ctc_parser_remove_l2_type(uint8 index);
extern int32 ctc_parser_remove_l3_type(uint8 index);
extern int32 ctc_parser_set_ip_hash_ctl(ctc_parser_ip_hash_ctl_t* hash_ctl);
extern int32 ctc_parser_set_ipv6_ctl(uint8 index, ctc_parser_ipv6_ctl_t* ipv6_ctl);
extern int32 ctc_parser_set_l2flex_ctl(uint8 index, ctc_parser_l2flex_ctl_t* l2flex_ctl);
extern int32 ctc_parser_set_l2_hash(ctc_parser_l2_ctl_fld_t* l2ctl);
extern int32 ctc_parser_set_l3flex_ctl(uint8 index, ctc_parser_l3flex_ctl_t* l3flex_ctl);
extern int32 ctc_parser_set_layer4_parser_ctl(ctc_parser_layer4_tbl_flags_t tbl_flags, ctc_parser_layer4_parser_ctl_t* l4_parser_ctl);
extern int32 ctc_parser_set_layer4_type(uint8 index, ctc_parser_l4_ptl_entry_t* entry);
extern int32 ctc_parser_set_max_length_filed(uint16 max_length);
extern int32 ctc_parser_set_mpls_ctl(ctc_parser_mpls_ctl_fld_t* mpls_ctl);
extern int32 ctc_parser_set_parser_quad_vlan_en(uint8 enable);
extern int32 ctc_parser_set_pbb_parser_ctl(ctc_parser_pbb_ctl_t* pbb_parser_ctl);
extern int32 ctc_parser_set_snap_allow_none_zero_oui(uint8 enable);
extern int32 ctc_parser_set_tpid(ctc_parser_l2_tpid_t type, uint16 tpid);
extern int32 ctc_parser_set_vlan_parser_num(uint8 vlan_num);
extern int32 ctc_l2pdu_classify_l2pdu(ctc_pdu_l2pdu_type_t l2pdu_type, uint8 index, ctc_pdu_l2pdu_key_t* key);
extern int32 ctc_l2pdu_get_classified_key(ctc_pdu_l2pdu_type_t l2pdu_type, uint8 index, ctc_pdu_l2pdu_key_t* key);
extern int32 ctc_l2pdu_get_global_action(ctc_pdu_l2pdu_type_t l2pdu_type,uint8 index, ctc_pdu_global_l2pdu_action_t* action);
extern int32 ctc_l2pdu_get_port_action(uint16 gport, uint8 action_index, ctc_pdu_port_l2pdu_action_t* action);
extern int32 ctc_l2pdu_set_global_action(ctc_pdu_l2pdu_type_t l2pdu_type,uint8 index, ctc_pdu_global_l2pdu_action_t* action);
extern int32 ctc_l2pdu_set_port_action(uint16 gport, uint8 action_index, ctc_pdu_port_l2pdu_action_t action);
extern int32 ctc_l3pdu_classify_l3pdu(ctc_pdu_l3pdu_type_t l3pdu_type, uint8 index, ctc_pdu_l3pdu_key_t* key);
extern int32 ctc_l3pdu_get_classified_key(ctc_pdu_l3pdu_type_t l3pdu_type, uint8 index, ctc_pdu_l3pdu_key_t* key);
extern int32 ctc_l3pdu_get_global_action(ctc_pdu_l3pdu_type_t l3pdu_type,uint8 index, ctc_pdu_global_l3pdu_action_t* action);
extern int32 ctc_l3pdu_get_l3if_action(uint16 l3ifid, uint8 action_index, ctc_pdu_l3if_l3pdu_action_t* action);
extern int32 ctc_l3pdu_set_global_action(ctc_pdu_l3pdu_type_t l3pdu_type,uint8 index, ctc_pdu_global_l3pdu_action_t* action);
extern int32 ctc_l3pdu_set_l3if_action(uint16 l3ifid, uint8 action_index, ctc_pdu_l3if_l3pdu_action_t action);
extern int32 ctc_pdu_init(void* pdu_global_cfg);
extern int32 ctc_get_cpu_mac_en(bool* enable);
extern int32 ctc_get_max_frame_size(ctc_frame_size_t index, uint16* value);
extern int32 ctc_port_get_bridge_en(uint16 gport, bool* enable);
extern int32 ctc_port_get_cross_connet(uint16 gport, bool* enable);
extern int32 ctc_port_get_default_vlan(uint16 gport, uint16* vid);
extern int32 ctc_port_get_dot1q_type(uint16 gport, ctc_dot1q_type_t* type);
extern int32 ctc_port_get_flow_ctl_en(uint16 gport, ctc_direction_t dir, uint32* enable);
extern int32 ctc_port_get_ipsg_en(uint16 gport, bool* enable);
extern int32 ctc_port_get_keep_vlan_tag(uint16 gport, bool* enable);
extern int32 ctc_port_get_learning_en(uint16 gport, bool* enable);
extern int32 ctc_port_get_mac_en(uint16 gport, bool* enable);
extern int32 ctc_port_get_max_frame(uint16 gport, ctc_frame_size_t* index);
extern int32 ctc_port_get_mcast_flooding_en(uint16 gport, bool* enable);
extern int32 ctc_port_get_min_frame_size(uint16 gport, uint8* size);
extern int32 ctc_port_get_outer_is_cvlan(uint16 gport, bool* is_cvlan);
extern int32 ctc_port_get_pading_en(uint16 gport, bool* enable);
extern int32 ctc_port_get_phy_if_en(uint16 gport,uint16* l3if_id, bool* enable);
extern int32 ctc_port_get_port_check_en(uint16 gport, bool* enable);
extern int32 ctc_port_get_preamble(uint16 gport, uint8* pre_bytes);
extern int32 ctc_port_get_pro_vlan_en(uint16 gport, bool* enable);
extern int32 ctc_port_get_random_log_en(uint16 gport, ctc_direction_t dir, bool* enable);
extern int32 ctc_port_get_random_threshold(uint16 gport, ctc_direction_t dir, uint16* threshold);
extern int32 ctc_port_get_receive_en(uint16 gport, bool* enable);
extern int32 ctc_port_get_reflective_bridge_en(uint16 gport, bool* enable);
extern int32 ctc_port_get_speed(uint16 gport, ctc_port_speed_t* speed_mode);
extern int32 ctc_port_get_srcdiscard_en(uint16 gport, bool* enable);
extern int32 ctc_port_get_src_outer_is_svlan(uint16 gport, bool* is_svlan);
extern int32 ctc_port_get_stag_tpid_index(uint16 gport, ctc_direction_t dir, uint8* index);
extern int32 ctc_port_get_stretch_mode_en(uint16 gport, bool* enable);
extern int32 ctc_port_get_sub_if_en(uint16 gport, bool* enable);
extern int32 ctc_port_get_transmit_en(uint16 gport, bool* enable);
extern int32 ctc_port_get_ucast_flooding_en(uint16 gport, bool* enable);
extern int32 ctc_port_get_untag_dft_vid(uint16 gport, bool* enable, bool* untag_svlan);
extern int32 ctc_port_get_use_inner_cos(uint16 gport, bool* is_inner);
extern int32 ctc_port_get_use_outer_ttl(uint16 gport, bool* enable);
extern int32 ctc_port_get_vlan_classify_enable(uint16 gport, ctc_vlan_class_type_t* type);
extern int32 ctc_port_get_vlanctl(uint16 gport, ctc_vlantag_ctl_t* mode);
extern int32 ctc_port_get_vlan_filter_en(uint16 gport, ctc_direction_t dir, bool* enable);
extern int32 ctc_port_get_vlan_mapping_en(uint16 gport, bool* enable);
extern int32 ctc_port_get_vlan_switching_en(uint16 gport, bool* enable);
extern int32 ctc_port_init(void* port_global_cfg);
extern int32 ctc_port_set_bridge_en(uint16 gport, bool enable);
extern int32 ctc_port_set_cross_connet(uint16 gport, bool enable);
extern int32 ctc_port_set_default_vlan(uint16 gport, uint16 vid);
extern int32 ctc_port_set_dot1q_type(uint16 gport, ctc_dot1q_type_t type);
extern int32 ctc_port_set_flow_ctl_en(uint16 gport, ctc_direction_t dir, uint32 enable);
extern int32 ctc_port_set_ipsg_en(uint16 gport, bool enable);
extern int32 ctc_port_set_keep_vlan_tag(uint16 gport, bool enable);
extern int32 ctc_port_set_learning_en(uint16 gport, bool enable);
extern int32 ctc_port_set_loopback (ctc_port_lbk_param_t* p_port_lbk);
extern int32 ctc_port_set_mac_en(uint16 gport, bool enable);
extern int32 ctc_port_set_max_frame(uint16 gport, ctc_frame_size_t index);
extern int32 ctc_port_set_mcast_flooding_en(uint16 gport, bool enable);
extern int32 ctc_port_set_min_frame_size(uint16 gport, uint8 size);
extern int32 ctc_port_set_outer_is_cvlan(uint16 gport, bool is_cvlan);
extern int32 ctc_port_set_pading_en(uint16 gport, bool enable);
extern int32 ctc_port_set_phy_if_en(uint16 gport, bool enable);
extern int32 ctc_port_set_port_check_en (uint16 gport, bool enable);
extern int32 ctc_port_set_preamble(uint16 gport, uint8 pre_bytes);
extern int32 ctc_port_set_pro_vlan_en(uint16 gport, bool enable);
extern int32 ctc_port_set_random_log_en(uint16 gport, ctc_direction_t dir, bool enable);
extern int32 ctc_port_set_random_threshold(uint16 gport, ctc_direction_t dir, uint16 threshold);
extern int32 ctc_port_set_receive_en(uint16 gport, bool enable);
extern int32 ctc_port_set_reflective_bridge_en(uint16 gport, bool enable);
extern int32 ctc_port_set_speed(uint16 gport, ctc_port_speed_t speed_mode);
extern int32 ctc_port_set_srcdiscard_en(uint16 gport, bool enable);
extern int32 ctc_port_set_src_outer_is_svlan(uint16 gport, bool is_svlan);
extern int32 ctc_port_set_stag_tpid_index(uint16 gport, ctc_direction_t dir, uint8 index);
extern int32 ctc_port_set_stretch_mode_en(uint16 gport, bool enable);
extern int32 ctc_port_set_sub_if_en(uint16 gport, bool enable);
extern int32 ctc_port_set_transmit_en(uint16 gport, bool enable);
extern int32 ctc_port_set_ucast_flooding_en(uint16 gport, bool enable);
extern int32 ctc_port_set_untag_dft_vid(uint16 gport, bool enable, bool untag_svlan);
extern int32 ctc_port_set_use_inner_cos(uint16 gport, bool is_inner);
extern int32 ctc_port_set_use_outer_ttl(uint16 gport, bool enable);
extern int32 ctc_port_set_vlan_classify_disable(uint16 gport, ctc_vlan_class_type_t type);
extern int32 ctc_port_set_vlan_classify_enable(uint16 gport, ctc_vlan_class_type_t type);
extern int32 ctc_port_set_vlanctl(uint16 gport, ctc_vlantag_ctl_t mode);
extern int32 ctc_port_set_vlan_filter_en(uint16 gport, ctc_direction_t dir, bool enable);
extern int32 ctc_port_set_vlan_mapping_en(uint16 gport, bool enable);
extern int32 ctc_port_set_vlan_switching_en(uint16 gport, bool enable);
extern int32 ctc_set_cpu_mac_en(bool enable);
extern int32 ctc_set_max_frame_size(ctc_frame_size_t index, uint16 value);
extern int32 ctc_channel_shape_global_enable(bool enable);
extern int32 ctc_create_service(uint16 service_id, uint8 dest_port);
extern int32 ctc_get_channel_shape_global_enable(bool* p_enable);
extern int32 ctc_get_group_shape(ctc_group_shape_cfg_t* group_shape);
extern int32 ctc_get_group_shape_global_enable(bool* p_enable);
extern int32 ctc_get_per_service_queue_num(uint8* p_que_num);
extern int32 ctc_get_port_queue_class(uint16 gport, uint8 qid, uint8* p_class);
extern int32 ctc_get_port_queue_drop(uint16 gport, uint8 qid, ctc_queue_drop_t* p_drop);
extern int32 ctc_get_port_queue_shape(uint16 gport, uint8 qid, ctc_queue_shape_t* p_shape);
extern int32 ctc_get_port_queue_shape_profile_num(uint32* p_shape_num);
extern int32 ctc_get_port_queue_stats(uint16 gport, uint8 qid, ctc_queue_stats_t* p_stats);
extern int32 ctc_get_port_queue_wdrr_weight(uint16 gport, uint8 qid, uint16* p_weight);
extern int32 ctc_get_port_shape(uint16 gport, ctc_port_shape_t* p_shape);
extern int32 ctc_get_queue_shape_global_enable(bool* p_enable);
extern int32 ctc_get_queue_stats_enable(bool* p_enable);
extern int32 ctc_get_service_queue_class(ctc_queue_type_t type, uint16 service_id, uint8 qid, uint8* p_class);
extern int32 ctc_get_service_queue_drop(ctc_queue_type_t type, uint16 service_id, uint8 qid, ctc_queue_drop_t* p_drop);
extern int32 ctc_get_service_queue_enable(bool* p_enable);
extern int32 ctc_get_service_queue_shape(ctc_queue_type_t type, uint16 service_id, uint8 qid, ctc_queue_shape_t* p_shape);
extern int32 ctc_get_service_queue_stats(ctc_queue_type_t type, uint16 service_id, uint8 qid, ctc_queue_stats_t* p_stats);
extern int32 ctc_get_service_queue_wdrr_weight(ctc_queue_type_t type, uint16 service_id, uint8 qid, uint16* p_weight);
extern int32 ctc_group_shape_global_enable(bool enable);
extern int32 ctc_qos_flow_id_global_enable(bool enable);
extern int32 ctc_qos_get_flow_id_global_enable(bool* p_enable);
extern int32 ctc_queue_get_resrc_mgr_global_enable(bool* p_enable);
extern int32 ctc_queue_init(ctc_queue_global_cfg_t* queue_global_cfg);
extern int32 ctc_queue_resrc_mgr_global_enable(bool enable);
extern int32 ctc_queue_shape_global_enable(bool enable);
extern int32 ctc_queue_shape_ipg_global_enable(bool enable);
extern int32 ctc_queue_stats_global_enable(bool enable);
extern int32 ctc_remove_service(uint16 service_id);
extern int32 ctc_reset_port_queue_stats(uint16 gport, uint8 qid);
extern int32 ctc_reset_service_queue_stats(ctc_queue_type_t type, uint16 service_id, uint8 qid);
extern int32 ctc_set_group_shape(ctc_group_shape_cfg_t* group_shape);
extern int32 ctc_set_port_queue_class(uint16 gport, uint8 qid, uint8 class);
extern int32 ctc_set_port_queue_drop(uint16 gport, uint8 qid, ctc_queue_drop_t* p_drop);
extern int32 ctc_set_port_queue_shape(uint16 gport, uint8 qid, ctc_queue_shape_t* p_shape);
extern int32 ctc_set_port_queue_wdrr_weight(uint16 gport, uint8 qid, uint16 weight);
extern int32 ctc_set_port_shape(uint16 gport, ctc_port_shape_t* p_shape);
extern int32 ctc_set_queue_priority_map(ctc_queue_pri_map_t* p_queue_pri_map);
extern int32 ctc_set_queue_size_mode(uint8 size_mode);
extern int32 ctc_set_queue_wdrr_weight_mtu(uint32 mtu);
extern int32 ctc_set_service_queue_class(ctc_queue_type_t type, uint16 service_id, uint8 qid, uint8 class);
extern int32 ctc_set_service_queue_drop(ctc_queue_type_t type, uint16 service_id, uint8 qid, ctc_queue_drop_t* p_drop);
extern int32 ctc_set_service_queue_shape(ctc_queue_type_t type, uint16 service_id, uint8 qid, ctc_queue_shape_t* p_shape);
extern int32 ctc_set_service_queue_wdrr_weight(ctc_queue_type_t type, uint16 service_id, uint8 qid, uint16 weight);
extern int32 ctc_unset_group_shape(ctc_group_shape_cfg_t* group_shape);
extern int32 ctc_unset_port_queue_shape(uint16 gport, uint8 qid);
extern int32 ctc_unset_port_shape(uint16 gport);
extern int32 ctc_unset_service_queue_shape(ctc_queue_type_t type, uint16 service_id, uint8 qid);
extern int32 ctc_global_ctl_get(ctc_global_control_type_t type, void* value);
extern int32 ctc_global_ctl_set(ctc_global_control_type_t type, void* value);
extern int32 ctc_register_init(void);
extern int32 ctc_port_isolation_get_isolated_id(uint16 gport, ctc_direction_t dir, uint8* p_isolated_id);
extern int32 ctc_port_isolation_get_route_obey_isolated_en(bool* p_enable);
extern int32 ctc_port_isolation_set_isolated_id(uint16 gport, ctc_direction_t dir, uint8 isolated_id);
extern int32 ctc_port_isolation_set_route_obey_isolated_en(bool enable);
extern int32 ctc_stats_get_drop_packet_stats_enable(bool* p_enable);
extern int32 ctc_stats_get_fwd_stats_enable(ctc_stats_fwd_type_t fwd_stats_type, bool* p_enable);
extern int32 ctc_stats_get_global_cfg(ctc_stats_property_param_t stats_param, ctc_stats_property_t* p_stats_prop);
extern int32 ctc_stats_get_global_fwd_stats(ctc_direction_t dir, ctc_stats_global_fwd_t* p_stats);
extern int32 ctc_stats_get_log_option(uint16 gport,ctc_direction_t dir, ctc_stats_basic_t* p_stats);
extern int32 ctc_stats_get_mac_stats_cfg(uint16 gport, ctc_mac_stats_prop_type_t mac_stats_prop_type, ctc_mac_stats_property_t* p_prop_data);
extern int32 ctc_stats_get_mac_stats(uint16 gport, ctc_mac_stats_dir_t dir, ctc_mac_stats_t* p_stats);
extern int32 ctc_stats_get_port_stats_cfg(ctc_direction_t dir, ctc_stats_port_stats_option_type_t* p_type);
extern int32 ctc_stats_get_port_stats(uint16 gport, ctc_direction_t dir, ctc_stats_port_t* p_stats);
extern int32 ctc_stats_init(void* stats_global_cfg);
extern int32 ctc_stats_intr_callback_func(uint8* gchip);
extern int32 ctc_stats_reset_global_fwd_stats(ctc_direction_t dir);
extern int32 ctc_stats_reset_log_option(uint16 gport,ctc_direction_t dir);
extern int32 ctc_stats_reset_mac_stats(uint16 gport, ctc_mac_stats_dir_t dir);
extern int32 ctc_stats_reset_port_stats(uint16 gport, ctc_direction_t dir);
extern int32 ctc_stats_set_drop_packet_stats_enable(bool enable);
extern int32 ctc_stats_set_global_cfg(ctc_stats_property_param_t stats_param, ctc_stats_property_t stats_prop);
extern int32 ctc_stats_set_mac_stats_cfg(uint16 gport, ctc_mac_stats_prop_type_t mac_stats_prop_type, ctc_mac_stats_property_t prop_data);
extern int32 ctc_stats_set_port_stats_cfg(ctc_direction_t dir, ctc_stats_port_stats_option_type_t type);
extern int32 ctc_stp_clear_all_inst_state(uint16 gport);
extern int32 ctc_stp_get_state(uint16 gport,uint8 stpid, uint8* state);
extern int32 ctc_stp_get_vlan_stpid(uint16 vlan_id, uint8* stpid);
extern int32 ctc_stp_set_state(uint16 gport, uint8 stpid, uint8 state);
extern int32 ctc_stp_set_vlan_stpid(uint16 vlan_id, uint8 stpid);
extern int32 ctc_usrid_init(void* usrid_global_cfg);
extern int32 ctc_vlan_add_port(uint16 vlan_id, uint16 gport);
extern int32 ctc_vlan_add_vlan_classification_default_entry(ctc_vlan_class_type_t type, ctc_vlan_miss_t* p_action);
extern int32 ctc_vlan_add_vlan_classification_entry(ctc_vlan_class_t* p_vlan_class);
extern int32 ctc_vlan_add_vlan_mapping_default_entry(uint16 gport, ctc_vlan_miss_t* p_action);
extern int32 ctc_vlan_add_vlan_mapping_entry(uint16 gport, ctc_vlan_mapping_t* p_vlan_mapping);
extern int32 ctc_vlan_create_vlan(uint16 vlan_id);
extern int32 ctc_vlan_flush_vlan_classification_entry(ctc_vlan_class_type_t type);
extern int32 ctc_vlan_get_arp_excp_type(uint16 vlan_id, ctc_exception_type_t* type);
extern int32 ctc_vlan_get_bridge_en(uint16 vlan_id, bool* enable);
extern int32 ctc_vlan_get_dhcp_excp_type(uint16 vlan_id, ctc_exception_type_t* type);
extern int32 ctc_vlan_get_fid(uint16 vlan_id, uint16* fid);
extern int32 ctc_vlan_get_igmp_snoop_en(uint16 vlan_id, bool* enable);
extern int32 ctc_vlan_get_learning_en(uint16 vlan_id, bool* enable);
extern int32 ctc_vlan_get_ports(uint16 vlan_id, ctc_port_bitmap_t* port_bitmap);
extern int32 ctc_vlan_get_receive_en(uint16 vlan_id, bool* enable);
extern int32 ctc_vlan_get_replace_dspc_en(uint16 vlan_id, bool* enable);
extern int32 ctc_vlan_get_transmit_en(uint16 vlan_id, bool* enable);
extern int32 ctc_vlan_init(ctc_vlan_global_cfg_t* vlan_global_cfg);
extern int32 ctc_vlan_remove_port(uint16 vlan_id, uint16 gport);
extern int32 ctc_vlan_remove_vlan_classification_default_entry(ctc_vlan_class_type_t type);
extern int32 ctc_vlan_remove_vlan_classification_entry(ctc_vlan_class_t* p_vlan_class);
extern int32 ctc_vlan_remove_vlan_mapping_all_by_port(uint16 gport);
extern int32 ctc_vlan_remove_vlan_mapping_default_entry(uint16 gport);
extern int32 ctc_vlan_remove_vlan_mapping_entry(uint16 gport, ctc_vlan_mapping_t* p_vlan_mapping);
extern int32 ctc_vlan_remove_vlan(uint16 vlan_id);
extern int32 ctc_vlan_set_arp_excp_type(uint16 vlan_id, ctc_exception_type_t type);
extern int32 ctc_vlan_set_bridge_en(uint16 vlan_id, bool enable);
extern int32 ctc_vlan_set_dhcp_excp_type(uint16 vlan_id, ctc_exception_type_t type);
extern int32 ctc_vlan_set_fid(uint16 vlan_id, uint16 fid);
extern int32 ctc_vlan_set_igmp_snoop_en(uint16 vlan_id, bool enable);
extern int32 ctc_vlan_set_learning_en(uint16 vlan_id, bool enable);
extern int32 ctc_vlan_set_receive_en(uint16 vlan_id, bool enable);
extern int32 ctc_vlan_set_replace_dscp_en(uint16 vlan_id, bool enable);
extern int32 ctc_vlan_set_transmit_en(uint16 vlan_id, bool enable);
 
#ifdef __cplusplus
}
#endif
#endif
